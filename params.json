{"google":"UA-32989350-1","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Mplstereonet","tagline":"Stereonets for matplotlib","body":"mplstereonet\r\n============\r\n``mplstereonet`` provides lower-hemisphere equal-area and equal-angle stereonets\r\nfor matplotlib.\r\n\r\n.. image:: http://joferkington.github.com/mplstereonet/images/equal_area_equal_angle_comparison.png\r\n    :alt: Comparison of equal angle and equal area stereonets.\r\n    :align: center\r\n    :target: https://github.com/joferkington/mplstereonet/blob/master/examples/equal_area_equal_angle_comparison.py\r\n\r\nBasic Usage\r\n-----------\r\nIn most cases, you'll want to ``import mplstereonet`` and then make an axes\r\nwith ``projection=\"stereonet\"`` (By default, this is an equal-area stereonet).\r\n\r\nAs an example::\r\n\r\n    import matplotlib.pyplot as plt\r\n    import mplstereonet\r\n\r\n    fig = plt.figure()\r\n    ax = fig.add_subplot(111, projection='stereonet')\r\n\r\n    strike, dip = 315, 30\r\n    ax.plane(strike, dip, 'g-', linewidth=2)\r\n    ax.pole(strike, dip, 'g^', markersize=18)\r\n    ax.rake(strike, dip, -25)\r\n    ax.grid()\r\n\r\n    plt.show()\r\n\r\n.. image:: http://joferkington.github.com/mplstereonet/images/basic.png\r\n    :alt: A basic stereonet with a plane, pole to the plane, and rake along the plane\r\n    :align: center\r\n    :target: https://github.com/joferkington/mplstereonet/blob/master/examples/basic.py\r\n    \r\nPlanes, lines, poles, and rakes can be plotted using axes methods (e.g.\r\n``ax.line(plunge, bearing)`` or ``ax.rake(strike, dip, rake_angle)``).\r\n\r\nAll planar measurements are expected to follow the right-hand-rule to indicate\r\ndip direction. As an example, 315/30S would be 135/30 follwing the right-hand\r\nrule.\r\n\r\nDensity Contouring\r\n------------------\r\n`mplstereonet` also provides a few different methods of producing contoured\r\norientation density diagrams.\r\n\r\nThe `ax.density_contour` and `ax.density_contourf` axes methods provide density\r\ncontour lines and filled density contours, respectively.  \"Raw\" density grids\r\ncan be produced with the `mplstereonet.density_grid` function.\r\n\r\nAs a basic example::\r\n\r\n    import matplotlib.pyplot as plt\r\n    import numpy as np\r\n    import mplstereonet\r\n    \r\n    fig, ax = plt.subplots(subplot_kw=dict(projection='stereonet'))\r\n    \r\n    strike, dip = 90, 80\r\n    num = 10\r\n    strikes = strike + 10 * np.random.randn(num)\r\n    dips = dip + 10 * np.random.randn(num)\r\n    \r\n    cax = ax.density_contourf(strikes, dips, measurement='poles')\r\n                              \r\n    ax.pole(strikes, dips)\r\n    ax.grid(True)\r\n    fig.colorbar(cax)\r\n    \r\n    plt.show()\r\n\r\n.. image:: http://joferkington.github.com/mplstereonet/images/contouring.png\r\n    :alt: Orientation density contours.\r\n    :align: center\r\n    :target: https://github.com/joferkington/mplstereonet/blob/master/examples/contouring.py\r\n\r\n\r\nBy default, a modified Kamb method with exponential smoothing [Vollmer1995]_ is\r\nused to estimate the orientation density distribution. Other methods (such as\r\nthe \"traditional\" Kamb [Kamb1956]_ and \"Schmidt\" (a.k.a. 1%) methods) are\r\navailable as well. The method and expected count (in standard deviations) can\r\nbe controlled by the `method` and `sigma` keyword arguments, respectively.\r\n\r\n.. image:: http://joferkington.github.com/mplstereonet/images/contour_angelier_data.png\r\n    :alt: Orientation density contours.\r\n    :align: center\r\n    :target: https://github.com/joferkington/mplstereonet/blob/master/examples/contour_angelier_data.py\r\n\r\nUtilities\r\n---------\r\n``mplstereonet`` also includes a number of utilities to parse structural\r\nmeasurements in either quadrant or azimuth form such that they follow the\r\nright-hand-rule. \r\n\r\nFor an example, see parsing_example.py_::\r\n\r\n    Parse quadrant azimuth measurements\r\n    \"N30E\" --> 30.0\r\n    \"E30N\" --> 60.0\r\n    \"W10S\" --> 260.0\r\n    \"N 10 W\" --> 350.0\r\n    \r\n    Parse quadrant strike/dip measurements.\r\n    Note that the output follows the right-hand-rule.\r\n    \"215/10\" --> Strike: 215.0, Dip: 10.0\r\n    \"215/10E\" --> Strike: 35.0, Dip: 10.0\r\n    \"215/10NW\" --> Strike: 215.0, Dip: 10.0\r\n    \"N30E/45NW\" --> Strike: 210.0, Dip: 45.0\r\n    \"E10N   20 N\" --> Strike: 260.0, Dip: 20.0\r\n    \"W30N/46.7 S\" --> Strike: 120.0, Dip: 46.7\r\n    \r\n    Similarly, you can parse rake measurements that don't follow the RHR.\r\n    \"N30E/45NW 10NE\" --> Strike: 210.0, Dip: 45.0, Rake: 170.0\r\n    \"210 45 30N\" --> Strike: 210.0, Dip: 45.0, Rake: 150.0\r\n    \"N30E/45NW raking 10SW\" --> Strike: 210.0, Dip: 45.0, Rake: 10.0\r\n\r\nAdditionally, you can find plane intersections and make other calculations by\r\ncombining utility functions.  See plane_intersection.py_ and\r\nparse_anglier_data.py_ for examples.\r\n\r\n\r\n\r\nReferences\r\n----------\r\n\r\n.. [Kamb1956] Kamb, 1959. Ice Petrofabric Observations from Blue Glacier,\r\n       Washington, in Relation to Theory and Experiment. Journal of\r\n       Geophysical Research, Vol. 64, No. 11, pp. 1891--1909.\r\n\r\n.. [Vollmer1995] Vollmer, 1995. C Program for Automatic Contouring of Spherical\r\n       Orientation Data Using a Modified Kamb Method. Computers &\r\n       Geosciences, Vol. 21, No. 1, pp. 31--49.\r\n\r\n.. _parsing_example.py: https://github.com/joferkington/mplstereonet/blob/master/examples/parsing_example.py\r\n\r\n.. _plane_intersection.py: https://github.com/joferkington/mplstereonet/blob/master/examples/plane_intersection.py\r\n\r\n.. _parse_anglier_data.py: https://github.com/joferkington/mplstereonet/blob/master/examples/parse_angelier_data.py\r\n"}